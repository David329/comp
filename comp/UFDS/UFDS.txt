class UFDS
{
public:
	UFDS(int n);
	~UFDS();

	int findSet(int x);
	void unionSet(int x, int y);

private:
	int *parent, *rank;
	int n;
};

UFDS::UFDS(int n)
{
	this->n = n;
	parent = new int[n];
	rank = new int[n];
	for (int i = 0; i < n; i++){
		parent[i] = i;
		rank[i] = 0;
	}
}

UFDS::~UFDS()
{
}

int UFDS::findSet(int x){
	if (x != parent[x])
		parent[x] = findSet(parent[x]);
	return parent[x];
}

void UFDS::unionSet(int x, int y){
	x = findSet(x);
	y = findSet(y);

	if (rank[x] > rank[y])
		parent[y] = x;
	else{
		parent[x] = y;

		if (rank[x] == rank[y])
			rank[y]++;
	}
}