#pragma once

#include <queue>
#include <vector>
#include <list>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <sstream>
#include "DisjointSets.h"

using namespace std;

typedef  pair<int, int> iPair;

class Graph
{
public:
	Graph(int v, int e);
	~Graph();

	void addEdge(int u, int v, int w);
	int kruskalMST();
	void readVerticesFromFile(char* archivo);
	void primMst(int s);

private:
	int v, e;
	vector<pair<int, iPair>> edges;

	//Prim
	priority_queue<pair<int, int>> pq;
	vector<int> taken;
	//

	void buildAdjList();
	void process(int src);
	bool getTaken(int u);
};

Graph::Graph(int v, int e)
{
	this->v = v;
	this->e = e;
}

Graph::~Graph(){}

void Graph::addEdge(int u, int v, int w){
	edges.push_back({ w, { u, v } });
}

int Graph::kruskalMST(){
	int mst_wt = 0;
	sort(edges.begin(), edges.end());
	DisjointSets ds(v);
	vector< pair<int, iPair> >::iterator it;
	for (it = edges.begin(); it != edges.end(); it++){
		int u = it->second.first;
		int v = it->second.second;
		int set_u = ds.findSet(u);
		int set_v = ds.findSet(v);

		if (set_u != set_v){
			cout << u << " - " << v << "   weight: " << it->first << endl;
			mst_wt += it->first;
			ds.unionSet(set_u, set_v);
		}
	}
	return mst_wt;
}

void Graph::readVerticesFromFile(char* archivo){
	ifstream file(archivo);
	if (!file.is_open()) cout << "No se pudo abrir el archivo." << endl << endl;

	int u, v, w;
	string line;
	while (getline(file, line)) {
		if (line[0] == '#') continue;
		stringstream ss(line);
		ss >> u;
		while (ss >> v >> w) {
			addEdge(u, v, w);
		}
	}
}

void Graph::primMst(int s){	
	taken.assign(v, s);
	process(s);
	int mst_cost = 0;
	int w, u;

	while (!pq.empty()){
		pair<int, int> front = pq.top();
		pq.pop();
		w = front.first;
		u = front.second;

		if (!taken[u]){
			cout << u << " - w: " << w << endl;
			mst_cost += w;
			process(u);
		}
	}

	cout << "primMST cost: " << mst_cost << endl;
}

void Graph::process(int src){
	
	taken[src] = 1;
	vector< pair<int, iPair> >::iterator it;
	for (it = edges.begin(); it != edges.end(); it++){
		int u = it->second.first; //origen
		if (u == src){	
			int v = it->second.second;//destino
			if (!taken[v]){
				int w = it->first;
				pq.push({ w, v });
			}
		}
	}	
}